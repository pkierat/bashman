#!/usr/bin/env bash

set -o emacs
shopt -s patsub_replacement

BASHMAN_HOME="$(cd $(dirname $(realpath $0)) && pwd)"
BASHMAN_HISTORY="${PWD}/.bashman_history"
BASHMAN_PATH=${BASHMAN_PATH:-.}
BASHMAN_EDITOR=${BASHMAN_EDITOR:-${EDITOR:-vim}}
BASHMAN_DIFFTOOL=${BASHMAN_DIFFTOOL:-vimdiff}

_greeting_() {
	echo "Bashman - command-line interpreter of Postman collections"
    echo ""
    echo "Type 'help' or use <TAB> to see the available commands and options."
    echo ""
    echo "Editor:        ${BASHMAN_EDITOR}"
    echo "Diff tool:     ${BASHMAN_DIFFTOOL}"
}

_help_() {
    cat <<-END_OF_HELP
	${nl}
	Usage:  command [options] [args] [> file]
	${nl}
	Available commands:
	  help                        Shows help
	  status                      Shows current environment, collection etc.
	  collection [opts] [file]    Loads a given Postman collection file or
	                              reloads the current one
	  environment [opts] [file]   Loads a given Postman environment file
	                              or reloads the current one
	  item [name]                 Selects the item or reloads the current one
	  run [item] [curl_opts]      Makes a call based on the current state
	  get VAR ...                 Shows the values of the environment variables
	  set VAR=VAL ...             Sets the values of the environment variables
	  exec command ...            Executes an arbitrary Bash command
	  export                      Produces a curl command based on the current
	                              environment, collection and item
	  quit                        Exits Bashman
	${nl}
	Environment variables:
	  BASHMAN_HOME                Directory containing all Bashman scripts
	  BASHMAN_PATH                Colon-separated list of directories to
	                              search for collections and environments
	  BASHMAN_HISTORY             Path to a file containing history of commands
	                              (default: \${BASHMAN_HOME}/.bashman_history)
	  BASHMAN_EDITOR              Program to be used for editing
	                              (default: \${EDITOR:-vim})
	  BASHMAN_DIFFTOOL            Program to be used for comparing
	                              (default: vimdiff)
	${nl}
	END_OF_HELP
}

## Completion

__complete_with_help__() {
    local query="${1}"
    local choice=$(__fzf__ "${query}")
    local variants=(${choice% -- *})
    echo "${variants[0]}"
}

_complete_cmd_() {
    local last="${1}"
    __complete_with_help__ "^${last}" <<-EOF
		collection      -- load or reload a Postman collection
		environment     -- load or reload a Postman environment
		help            -- show help
		item            -- choose an item from the current collection
		run             -- make a call based on the current state
		export          -- export a call (default), environment or history
		get             -- show environment variables
		set             -- set environment variables
		status          -- show current environment, collection etc.
		exec            -- execute an arbitrary Bash command
		quit            -- exit Bashman
		EOF
}

_complete_load_() {
    local type="${1}"
    local line="${2}"
    local last="${line##* }"

    if [[ ${last} == -* ]]; then
        __complete_with_help__ "'${last}" <<-EOF
			--diff      -d  -- compare side-by-side
			--edit      -e  -- edit before loading
			--write     -w  -- write the output to a file
			EOF
    else
        find ${BASHMAN_PATH//:/ } -name "*.postman_${type}.*" | sed -e "s#^${PWD}##" | __fzf__ "${last}"
    fi
}

_complete_collection_() {
    _complete_load_ collection "${@}"
}

_complete_environment_() {
    _complete_load_ environment "${@}"
}

_complete_item_() {
    local args="${1}"
    local last="${args##* }"
    __items__ | __fzf__ "${last}"
}

_complete_set_() {
    local var
    local args="${1}"
    local last="${args##* }"
    for var in "${!BM_@}"; do echo "${var}"; done | __fzf__ "${last}"
}

_complete_run_() {
    _complete_item_ "${@}"
}

_complete_export_() {
    local last="${1##* }"
    __complete_with_help__ "'${last}" <<-EOF
		--environment       -e  -- environment variables
		--history=recent    -h  -- commands entered in the current session
		--history=full      -H  -- entire command history
		EOF
}

_complete_() {
    local line="${READLINE_LINE:0:${READLINE_POINT}}"
    local cmd="${line%% *}"
    local args="${line#* }"
    local suffix=" "

    if [[ ${#line} -le ${#cmd} ]]; then
        local comp="$(_complete_cmd_ ${line})"
        if [[ ${comp:-''} ]]; then
            READLINE_LINE="${comp}${suffix}"
        fi
    else
        case "${cmd}" in
            c|collection) cmd=collection ;;
            e|environment) cmd=environment ;;
            i|item) cmd=item ;;
            r|run) cmd=run ;;
            g|get) cmd=set; ;;
            s|set) cmd=set; suffix="=" ;;
            x|export) cmd=export ;;
            ?|status) cmd=status ;;
            h|help) cmd=help ;;
            q|quit) cmd=quit ;;
        esac
        if declare -f _complete_${cmd}_ >/dev/null; then
            local comp="$(_complete_${cmd}_ "${line}")"
            if [[ ${comp:-''} ]]; then
                READLINE_LINE="${line% *} ${comp}${suffix}"
            fi
        fi
    fi

    READLINE_POINT=${#READLINE_LINE}
}

## Commands

_load_() {
    local type=${1}   # environment or collection
    local -n var=${2}
    shift 2

    local -A opts
    while [[ ${1} = -* ]]; do
        case "${1}" in
            -d|--diff)  opts[diff]=1;  shift ;;
            -e|--edit)  opts[edit]=1;  shift ;;
            -w|--write) opts[write]=1; shift ;;
        esac
    done

    local file="${1:-${var}}"

    [[ -z "${file}" ]] && { echo "No ${type} selected." >&2; return 2; }
    [[ -f "${file}" && -r "${file}" ]] || { echo "File not found or not readable." >&2; return 1; }

    temp=$(mktemp)
    if [[ ${file} == *.json ]]; then
        jq -L "${BASHMAN_HOME}" -r -f "${BASHMAN_HOME}/${type}.jq" < "${file}" > "${temp}"
    else
        cat < "${file}" > "${temp}"
    fi

    if [[ ${opts[diff]} ]]; then
        ${BASHMAN_DIFFTOOL} "${temp}" "${file%.*}.sh" || return 1
    elif [[ ${opts[edit]} ]]; then
        ${BASHMAN_EDITOR} "${temp}" || return 1
    fi

    source "${temp}"

    if [[ ${opts[write]} ]]; then
        file="${file%.*}.sh"
        cat "${temp}" > "${file}"
    fi

    var="${file}"
}

_collection_() {
    unset -f $(__items__)

    _load_ collection _BM_COLLECTION_ "${@}"

    if [[ -n "${_BM_ITEM_}" ]] && __items__ "${_BM_ITEM_}"; then
        _item_ "${_BM_ITEM_}"
    else
        unset _BM_ITEM_
    fi
}

_environment_() {
    _load_ environment _BM_ENVIRONMENT_ "${@}"

    [[ -n "${_BM_COLLECTION_}" ]] && _collection_ "${_BM_COLLECTION_}"
    [[ -n "${_BM_ITEM_}" ]] && _item_ "${_BM_ITEM_}"
}

_item_() {
    local item=${1:-${_BM_ITEM_}}
    [[ -z "${item}" ]] && { echo "No item selected." >&2; return 2; }

    __items__ "${item}" || { echo "Item not found." >&2; return 1; }

    unset BM_NAME BM_METHOD BM_HEADER BM_BODY BM_URL
    unset _BM_RESPONSE_BODY_ _BM_RESPONSE_META_ _BM_RESPONSE_CODE_

    ${item} && _BM_ITEM_="${item}"
}

_run_() {
    __redirect__ _run_ "${@}" && return || true

    if [[ -n ${1} && ${1} != -* ]] && __items__ "${1}"; then
        _item_ "${1}"
        shift
    fi

    local auth headers response
    case "${BM_AUTH_TYPE}" in
        basic) auth="--basic -u ${BM_AUTH_USER}:${BM_AUTH_PASS}" ;;
        digest) auth="--digest -u ${BM_AUTH_USER}:${BM_AUTH_PASS}" ;;
        bearer) auth="--oauth2-bearer ${BM_AUTH_TOKEN}" ;;
        apikey) auth="--header '${BM_AUTH_KEY}: ${BM_AUTH_VALUE}'" ;;
    esac

    response=$(curl \
        --silent \
        --write-out '\n%{json}' \
        --location \
        --request "${BM_METHOD}" "$(eval "echo \"${BM_URL}\"")" \
        --header @<(for header in "${BM_HEADER[@]}"; do echo "${header}"; done) \
        ${auth:-} \
        ${auth## } \
        --data "$(eval 'echo "${BM_BODY}"')" \
        "${@}")

    _BM_RESPONSE_META_=$(tail -n 1 <<< "${response}")
    _BM_RESPONSE_BODY_=$(head -n -1 <<< "${response}")
    _BM_RESPONSE_CODE_=$(jq .http_code <<< "${_BM_RESPONSE_META_}")

    cat <<< "${_BM_RESPONSE_BODY_}"
}


_export_() {
    __redirect__ _export_ "${@}" && return || true

    if [[ ${1} == '-e' || ${1} == '--environment' ]]; then
        local vars="${!BM_*}"
        [[ ${vars} ]] && declare -p -- ${vars} | cut -d ' ' -f 3-
    elif [[ ${1} == '-h' || ${1} == '--history=recent' ]]; then
        history | sed -e 's/ *[0-9]\+ *//'
    elif [[ ${1} == '-H' || ${1} == '--history=full' ]]; then
        history | tail -n +$(_BM_INITIAL_HISTORY_SIZE_ + 1) | sed -e 's/ *[0-9]\+ *//'
    else
        local auth
        case "${BM_AUTH_TYPE}" in
	        basic)  auth="--basic -u '${BM_AUTH_USER}:${BM_AUTH_PASS}'" ;;
	        digest) auth="--digest -u '${BM_AUTH_USER}:${BM_AUTH_PASS}'" ;;
	        bearer) auth="--oauth2-bearer '${BM_AUTH_TOKEN}'" ;;
	        apikey) auth="--header '${BM_AUTH_KEY}: ${BM_AUTH_VALUE}'" ;;
            *)      auth="--anyauth" ;;
        esac

        echo $'\n' \
             "curl" $'\\\n' \
             "  --silent" $'\\\n'\
             "  --location" $'\\\n'\
             "  --request ${BM_METHOD} '$(eval "echo -n \"${BM_URL}\"")'" $'\\\n'\
	         "  ${auth}" $'\\\n'\
             "${BM_HEADER[@]/*/  --header \'&\' $'\\\n'}"\
             "  --data-raw '$(eval "echo -n \"${BM_BODY}\"")'" "${@}"\
             $'\n'
     fi
}

_status_() {
    case "${_BM_RESPONSE_CODE_}" in
        [23][0-9][0-9]) _BM_RESPONSE_CODE_="\e[92m${_BM_RESPONSE_CODE_}\e[0m"; ;;
        [45][0-9][0-9]) _BM_RESPONSE_CODE_="\e[91m${_BM_RESPONSE_CODE_}\e[0m"; ;;
    esac

    echo ""
    echo -e "Environment:   ${_BM_ENVIRONMENT_NAME_:-[n/a]}"
    echo -e "Collection:    ${_BM_COLLECTION_NAME_:-[n/a]}"
    echo -e "Item:          ${_BM_ITEM_:-[n/a]}"
    echo -e "Last response: ${_BM_RESPONSE_CODE_:-[n/a]}"
    echo ""
}

_get_() {
    eval "declare -p -- ${@}" | cut -d ' ' -f 3-
}

_set_() {
    eval "declare -- ${@}"
}

_prompt_() {
    local var_name="${1}"
    local -n var="${var_name}"
    _status_
    while read -r -e -p "> " -a "${var_name}"; do
        [[ -z "${var}" || "${var}" = '#'* ]] || break
    done
}

_reload_() {
    [[ -n "${_BM_ENVIRONMENT_}" && -r "${_BM_ENVIRONMENT_}" ]] && _environment_ "${_BM_ENVIRONMENT_}"
    [[ -n "${_BM_COLLECTION_}" && -r "${_BM_COLLECTION_}" ]] && _collection_ "${_BM_COLLECTION_}"
    [[ -n "${_BM_ITEM_}" && -r "${_BM_ITEM_}" ]] && _item_ "${_BM_ITEM_}"
}

## Utils

__items__() {
    declare -F | awk '{print $3}' | grep -v '^_' | {
        if [[ -n $1 ]]; then
            grep -q "${_BM_ITEM_}"
        else
            cat
        fi
    }
}

__fzf__() { fzf --tac --cycle +s -1 -0 -q "$1"; }

__redirect__() {
    local func="${1}"; shift
    local args=("${@}")
    if [[ ${#args[@]} -gt 1 && ${args[-2]} == '>' ]]; then
        local file="${args[-1]}"
        unset args[-1] args[-1]
        ${func} "${args[@]}" > "${file}"
        return 0
    fi
    return 1
}

# Main

_check_deps_() {
    which curl                   >/dev/null || { echo "curl not found. See: https://curl.se/" >&2; exit 1; }
    which jq                     >/dev/null || { echo "jq not found. See: https://jqlang.github.io/jq/" >&2; exit 1; }
    which fzf                    >/dev/null || { echo "fzf not found. See: https://junegunn.github.io/fzf/" >&2; exit 1; }
    which ${BASHMAN_EDITOR% *}   >/dev/null || { echo "${BASHMAN_EDITOR} not found." >&2; exit 1; }
    which ${BASHMAN_DIFFTOOL% *} >/dev/null || { echo "${BASHMAN_DIFFTOOL} not found." >&2; exit 1; }
}

_init_() {
    [[ -r ${HOME}/.config/bashman/config ]] && source ${HOME}/.config/bashman/config
    [[ -r ./.bashman_config ]] && source ./.bashman_config

    touch "${BASHMAN_HISTORY}"
    history -r "${BASHMAN_HISTORY}"
    _BM_INITIAL_HISTORY_SIZE_=$(history | wc -l)

    _reload_

    bind -x '"\t":"_complete_"'
}

__main__() {
    __MAIN__=1

    _check_deps_
    _init_
    _greeting_

    local CMDLINE CMD ARGS

    while _prompt_ CMDLINE; do
        history -s "${CMDLINE[*]}"
        CMD=${CMDLINE[0]}
        ARGS=("${CMDLINE[@]:1}")
        case "${CMD}" in
            e|environment) _environment_ "${ARGS[@]}" ;;
            c|collection) _collection_ "${ARGS[@]}" ;;
            i|item) _item_ "${ARGS[@]}" ;;
            r|run) _run_ "${ARGS[@]}" ;;
            g|get) _get_ "${ARGS[@]}";;
            s|set) _set_ "${ARGS[@]}";;
            x|export) _export_ "${ARGS[@]}" ;;
            !|exec) eval "${ARGS[*]}" ;;
            ?|status) _status_ ;;
            h|help) _help_ ;;
            q|quit) break ;;
            *=*) _set_ "${CMDLINE[@]}" ;;
            *) echo "Unknown command: ${CMD}" >&2 ;;
        esac
        unset CMDLINE CMD ARGS
    done

    history -w "${BASHMAN_HISTORY}"
}

[[ ${__MAIN__:-''} ]] || __main__ "$@"
