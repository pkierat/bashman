#!/usr/bin/env bash

set -o emacs

BASHMAN_HOME="$(cd $(dirname $(realpath $0)) && pwd)"
BASHMAN_HISTORY="${PWD}/.bashman_history"
BASHMAN_PATH=${BASHMAN_PATH:-.}
BASHMAN_EDITOR=${BASHMAN_EDITOR:-${EDITOR:-vim}}
BASHMAN_DIFFTOOL=${BASHMAN_DIFFTOOL:-vimdiff}

_greeting_() {
	echo "Bashman - command-line interpreter of Postman collections"
    echo ""
    echo "Type 'help' to list the available commands and options."
}

_help_() {
    cat <<-END_OF_HELP
	${nl}
	Available commands:
	  help                        Shows help
	  status                      Shows current environment, collection etc.
	  collection [opts] [file]    Loads a given Postman collection file
	                                 or reloads the current one
	  environment [opts] [file]   Loads a given Postman environment file
	                              or reloads the current one
	  item [name]                 Selects the item or reloads the current one
	  run [item] [curl_opts]      Makes a call based on the current state
	  get VAR ...                 Shows the values of the environment variables
	  set VAR=VAL ...             Sets the values of the environment variables
	  exec command ...            Executes an arbitrary Bash command
	  quit                        Exits Bashman
	${nl}
	Options:
	  -d, --diff                  Compares new and existing file side by side
	  -e, --edit                  Edits the file before loading
	  -w, --write                 Saves the generated file as \${file/.json/.sh}
	${nl}
	Environment variables:
	  BASHMAN_HOME                Directory containing all Bashman scripts
	  BASHMAN_PATH                Colon-separated list of directories to
	                              search for collections and environments
	  BASHMAN_HISTORY             Path to a file containing history of commands
	                              (default: \${BASHMAN_HOME}/.bashman_history)
	  BASHMAN_EDITOR              Program to be used for editing
	                              (default: \${EDITOR:-vim})
	  BASHMAN_DIFFTOOL            Program to be used for comparing
	                              (default: vimdiff)
	${nl}
	END_OF_HELP
}

## Utils

_items_() {
    declare -F | awk '{print $3}' | grep -v '^_' | {
        if [[ -n $1 ]]; then
            grep -q "${BM_ITEM}"
        else
            cat
        fi
    }
}

## Completion

_complete_cmd_() {
    sed -e 's/ /\n/g' <<< "collection environment help item run set status quit" | fzf +s -1 -0 -q "^${1}"
}

_complete_load_() {
    local type="${1}"
    local line="${2}"
    local last="${line##* }"

    cat <(sed -e 's/ /\n/g' <<< "-d --diff -e --edit -w --write") \
        <(find ${BASHMAN_PATH//:/ } -name "*.postman_${type}.*" | sed -e "s#^${PWD}##") \
        | fzf --tac +s -1 -0 -q "${last}"
}

_complete_collection_() {
    _complete_load_ collection "${@}"
}

_complete_environment_() {
    _complete_load_ environment "${@}"
}

_complete_item_() {
    local args="${1}"
    local last="${args##* }"
    _items_ | fzf -1 -0 -q "${last}"
}

_complete_set_() {
    local var
    local args="${1}"
    local last="${args##* }"
    echo ">>>${last}<<<" >&2
    for var in "${!BM_@}"; do echo "${var}"; done | fzf -1 -0 -q "${last}"
}

_complete_run_() {
    _complete_item_ "${@}"
}

_complete_() {
    local line="${READLINE_LINE:0:${READLINE_POINT}}"
    local cmd="${line%% *}"
    local args="${line#* }"
    local suffix=" "

    if [[ ${#line} -le ${#cmd} ]]; then
        local comp="$(_complete_cmd_ ${line})"
        if [[ ${comp:-''} ]]; then
            READLINE_LINE="${comp}${suffix}"
        fi
    else
        case "${cmd}" in
            c|collection) cmd=collection ;;
            e|environment) cmd=environment ;;
            i|item) cmd=item ;;
            r|run) cmd=run ;;
            g|get) cmd=set; ;;
            s|set) cmd=set; suffix="=" ;;
            ?|status) cmd=status ;;
            h|help) cmd=help ;;
            q|quit) cmd=quit ;;
        esac
        if declare -f _complete_${cmd}_ >/dev/null; then
            local comp="$(_complete_${cmd}_ "${line}")"
            if [[ ${comp:-''} ]]; then
                READLINE_LINE="${line% *} ${comp}${suffix}"
            fi
        fi
    fi

    READLINE_POINT=${#READLINE_LINE}
}

## Commands

_load_() {
    local type=${1}   # environment or collection
    local -n var=${2}
    shift 2

    local -A opts
    while [[ ${1} = -* ]]; do
        case "${1}" in
            -d|--diff)  opts[diff]=1;  shift ;;
            -e|--edit)  opts[edit]=1;  shift ;;
            -w|--write) opts[write]=1; shift ;;
        esac
    done

    local file="${1:-${var}}"

    [[ -z "${file}" ]] && { echo "No ${type} selected." >&2; return 2; }
    [[ -f "${file}" && -r "${file}" ]] || { echo "File not found or not readable." >&2; return 1; }

    temp=$(mktemp)
    if [[ ${file} == *.json ]]; then
        jq -L "${BASHMAN_HOME}" -r -f "${BASHMAN_HOME}/${type}.jq" < "${file}" > "${temp}"
    else
        cat < "${file}" > "${temp}"
    fi

    if [[ ${opts[diff]} ]]; then
        ${BASHMAN_DIFFTOOL} "${temp}" "${file%.*}.sh" || return 1
    elif [[ ${opts[edit]} ]]; then
        ${BASHMAN_EDITOR} "${temp}" || return 1
    fi

    source "${temp}"

    if [[ ${opts[write]} ]]; then
        file="${file%.*}.sh"
        cat "${temp}" > "${file}"
    fi

    var="${file}"
}

_collection_() {
    unset -f $(_items_)

    _load_ collection BM_COLLECTION "${@}"

    if [[ -n "${BM_ITEM}" ]] && _items_ "${BM_ITEM}"; then
        _item_ "${BM_ITEM}"
    else
        unset BM_ITEM
    fi
}

_environment_() {
    _load_ environment BM_ENVIRONMENT "${@}"

    [[ -n "${BM_COLLECTION}" ]] && _collection_ "${BM_COLLECTION}"
    [[ -n "${BM_ITEM}" ]] && _item_ "${BM_ITEM}"
}

_item_() {
    local item=${1:-${BM_ITEM}}
    [[ -z "${item}" ]] && { echo "No item selected." >&2; return 2; }

    _items_ "${item}" || { echo "Item not found." >&2; return 1; }

    unset BM_NAME BM_METHOD BM_HEADER BM_BODY BM_URL
    unset BM_RESPONSE_BODY BM_RESPONSE_META BM_RESPONSE_CODE

    ${item} && BM_ITEM="${item}"
}

_run_() {
    if [[ -n ${1} && ${1} != -* ]] && _items_ "${1}"; then
        _item_ "${1}"
        shift
    fi

    local auth headers response
    case "${BM_AUTH_TYPE}" in
        basic) auth="--basic -u ${BM_AUTH_USER}:${BM_AUTH_PASS}" ;;
        digest) auth="--digest -u ${BM_AUTH_USER}:${BM_AUTH_PASS}" ;;
        bearer) auth="--oauth2-bearer ${BM_AUTH_TOKEN}" ;;
        apikey) auth="--header '${BM_AUTH_KEY}: ${BM_AUTH_VALUE}'" ;;
    esac

    response=$(curl \
        --silent \
        --write-out '\n%{json}' \
        --location \
        --request "${BM_METHOD}" "${BM_URL}" \
        --header @<(for header in "${BM_HEADER[@]}"; do echo "${header}"; done) \
        ${auth:-} \
        ${auth## } \
        --data "${BM_BODY}" \
        "${@}")

    BM_RESPONSE_META=$(tail -n 1 <<< "${response}")
    BM_RESPONSE_BODY=$(head -n -1 <<< "${response}")
    BM_RESPONSE_CODE=$(jq .http_code <<< "${BM_RESPONSE_META}")

    cat <<< "${BM_RESPONSE_BODY}"
}

_status_() {
    case "${BM_RESPONSE_CODE}" in
        [23][0-9][0-9]) BM_RESPONSE_CODE="\e[92m${BM_RESPONSE_CODE}\e[0m"; ;;
        [45][0-9][0-9]) BM_RESPONSE_CODE="\e[91m${BM_RESPONSE_CODE}\e[0m"; ;;
    esac

    echo ""
    echo -e "Environment:   ${BM_ENVIRONMENT_NAME:-[n/a]}"
    echo -e "Collection:    ${BM_COLLECTION_NAME:-[n/a]}"
    echo -e "Item:          ${BM_ITEM:-[n/a]}"
    echo -e "Last response: ${BM_RESPONSE_CODE:-[n/a]}"
    echo ""
}

_get_() {
    eval "declare -p -- ${@}" | sed 's/declare \(-[^ ]* *\)*//'
}

_set_() {
    eval "declare -- ${@}"
}

_prompt_() {
    local var_name=$1
    _status_
    read -e -p "> " -a "${var_name}"
}

_reload_() {
    [[ -n "${BM_ENVIRONMENT}" && -r "${BM_ENVIRONMENT}" ]] && _environment_ "${BM_ENVIRONMENT}"
    [[ -n "${BM_COLLECTION}" && -r "${BM_COLLECTION}" ]] && _collection_ "${BM_COLLECTION}"
    [[ -n "${BM_ITEM}" && -r "${BM_ITEM}" ]] && _item_ "${BM_ITEM}"
}

_init_() {
    [[ -r ${HOME}/.config/bashman/config ]] && source ${HOME}/.config/bashman/config
    [[ -r ./.bashman_config ]] && source ./.bashman_config

    touch "${BASHMAN_HISTORY}"
    history -r "${BASHMAN_HISTORY}"

    _reload_

    bind -x '"\t":"_complete_"'
}

_init_
_greeting_

while _prompt_ CMDLINE; do
    history -s "${CMDLINE[*]}"
    CMD=${CMDLINE[0]}
    ARGS=("${CMDLINE[@]:1}")
    case "${CMD}" in
        e|environment) _environment_ "${ARGS[@]}" ;;
        c|collection) _collection_ "${ARGS[@]}" ;;
        i|item) _item_ "${ARGS[@]}" ;;
        r|run) _run_ "${ARGS[@]}" ;;
        g|get) _get_ "${ARGS[@]}";;
        s|set) _set_ "${ARGS[@]}";;
        x|exec) eval "${ARGS[*]}" ;;
        ?|status) _status_ ;;
        h|help) _help_ ;;
        q|quit) break ;;
        *=*) _set_ "${CMDLINE[@]}" ;;
        "") continue ;;
        *) echo "Unknown command: ${CMD}" >&2 ;;
    esac
    unset CMDLINE CMD ARGS
done

history -w "${BASHMAN_HISTORY}"
